import { Injectable, Logger } from '@nestjs/common';
import OpenAI from 'openai';

@Injectable()
export class OpenAiService {
  private client: OpenAI;
  private readonly logger = new Logger(OpenAiService.name);

  constructor() {
    if (process.env.OPENAI_API_KEY) {
      this.client = new OpenAI({ apiKey: process.env.OPENAI_API_KEY });
    }else{
      this.logger.warn(
        'OPENAI_API_KEY is missing üö´ ‚Äî OpenAiService will run in mock mode',
      );
    }
    
  }

  async analyseFeedback(message: string) {
    if (!this.client) {
      return {
        tone: this.mockTone(message),
        criticality: Math.floor(Math.random() * 5) + 1,
        solution: '–¶–µ —Ç–µ—Å—Ç–æ–≤–∞ –ø–æ—Ä–∞–¥–∞ (–º–æ–∫-–¥–∞–Ω—ñ).',
      };
    }

    const prompt = `
    –ü—Ä–æ–∞–Ω–∞–ª—ñ–∑—É–π —Ü–µ–π –≤—ñ–¥–≥—É–∫:
    "${message}"

    –í—ñ–¥–ø–æ–≤—ñ–¥–∞–π —É JSON:
    {
      "tone": "–ø–æ–∑–∏—Ç–∏–≤–Ω–∞ | –Ω–µ–π—Ç—Ä–∞–ª—å–Ω–∞ | –Ω–µ–≥–∞—Ç–∏–≤–Ω–∞",
      "criticality": 1-5,
      "solution": "–∫–æ—Ä–æ—Ç–∫–∞ –ø–æ—Ä–∞–¥–∞"
    }
    `;

    const response = await this.client.chat.completions.create({
      model: 'gpt-4o-mini',
      messages: [{ role: 'user', content: prompt }],
      response_format: { type: "json_object" }
    });

    return JSON.parse(response.choices[0].message.content || '{}');
  }

   private mockTone(message: string) {
    const lower = message.toLowerCase();
    if (lower.includes('–ø–æ–≥–∞–Ω–æ') || lower.includes('–∂–∞—Ö–ª–∏–≤–æ')) return '–Ω–µ–≥–∞—Ç–∏–≤–Ω–∞';
    if (lower.includes('–¥–æ–±—Ä–µ') || lower.includes('—á—É–¥–æ–≤–æ')) return '–ø–æ–∑–∏—Ç–∏–≤–Ω–∞';
    return '–Ω–µ–π—Ç—Ä–∞–ª—å–Ω–∞';
  }
}
