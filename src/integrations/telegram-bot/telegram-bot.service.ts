import { Injectable, Logger, OnModuleDestroy, OnModuleInit } from '@nestjs/common';
import { ConfigService } from '@nestjs/config';
import { Telegraf, Markup } from 'telegraf';
import { FeedbackService } from '../../feedback/feedback.service';

type State = 'WAIT_ROLE' | 'WAIT_BRANCH' | 'READY';
interface UserState {
  state: State;
  role?: string;
  branch?: string;
}

@Injectable()
export class TelegramBotService implements OnModuleInit, OnModuleDestroy {
  private readonly logger = new Logger(TelegramBotService.name);
  private bot?: Telegraf;
  private users = new Map<number, UserState>();

  private ROLES = ['–ú–µ—Ö–∞–Ω—ñ–∫', '–ï–ª–µ–∫—Ç—Ä–∏–∫', '–ú–µ–Ω–µ–¥–∂–µ—Ä']; // can be moved to .env

  constructor(
    private readonly config: ConfigService,
    private readonly feedbackService: FeedbackService,
  ) {}

  async onModuleInit() {
    const token = this.config.get<string>('TELEGRAM_BOT_TOKEN');
    if (!token) throw new Error('TELEGRAM_BOT_TOKEN is not set');

    this.bot = new Telegraf(token);

    this.bot.start(async (ctx) => {
      const st = this.ensureState(ctx.from.id);
      if (st.state === 'READY') {
        await ctx.reply('–í—ñ—Ç–∞—é! –ù–∞–¥—Å–∏–ª–∞–π—Ç–µ –≤–∞—à —Ñ—ñ–¥–±–µ–∫ –æ–¥–Ω–∏–º –ø–æ–≤—ñ–¥–æ–º–ª–µ–Ω–Ω—è–º.');
      } else {
        await ctx.reply('–ü—Ä–∏–≤—ñ—Ç! –î–∞–≤–∞–π –Ω–∞–ª–∞—à—Ç—É—î–º–æ—Å—å üòâ');
        await this.askRole(ctx);
      }
    });

    // command for changing role
    this.bot.command('role', async (ctx) => {
      const st = this.ensureState(ctx.from.id);
      st.state = 'WAIT_ROLE';
      await this.askRole(ctx);
    });

    this.bot.command('branch', async (ctx) => {
      const st = this.ensureState(ctx.from.id);
      st.state = 'WAIT_BRANCH';
      await this.askBranch(ctx);
    });

    this.bot.on('text', async (ctx) => this.onText(ctx));

    await this.bot.launch();
    this.logger.log('Telegram bot launched');
    // small break
    process.once('SIGINT', () => this.bot?.stop('SIGINT'));
    process.once('SIGTERM', () => this.bot?.stop('SIGTERM'));
  }

  async onModuleDestroy() {
    await this.bot?.stop();
  }

  // -------- conversation logic --------

  private ensureState(userId: number): UserState {
    if (!this.users.has(userId)) {
      this.users.set(userId, { state: 'WAIT_ROLE' });
    }
    return this.users.get(userId)!;
  }

  private async onText(ctx: any) {
    const text: string = (ctx.message?.text || '').trim();
    const userId = ctx.from.id;
    const st = this.ensureState(userId);

    if (st.state === 'WAIT_ROLE') {
      const picked = this.ROLES.find(r => r.toLowerCase() === text.toLowerCase());
      if (!picked) {
        await ctx.reply('–ë—É–¥—å –ª–∞—Å–∫–∞, –æ–±–µ—Ä—ñ—Ç—å –ø–æ—Å–∞–¥—É –∫–Ω–æ–ø–∫–æ—é –Ω–∏–∂—á–µ.', this.roleKeyboard());
        return;
      }
      st.role = picked;
      st.state = 'WAIT_BRANCH';
      await this.askBranch(ctx);
      return;
    }

    if (st.state === 'WAIT_BRANCH') {
      const branches = this.getBranches();
      if (branches.length) {
        const picked = branches.find(b => b.toLowerCase() === text.toLowerCase());
        if (!picked) {
          await ctx.reply('–û–±–µ—Ä—ñ—Ç—å —Ñ—ñ–ª—ñ—é –∑ –∫–Ω–æ–ø–æ–∫ –Ω–∏–∂—á–µ.', this.branchKeyboard(branches));
          return;
        }
        st.branch = picked;
      } else {
        st.branch = text;
      }
      st.state = 'READY';
      await ctx.reply(
        `–ì–æ—Ç–æ–≤–æ! –ü–æ—Å–∞–¥–∞: ${st.role}; –§—ñ–ª—ñ—è: ${st.branch}.\n–¢–µ–ø–µ—Ä –ø—Ä–æ—Å—Ç–æ –Ω–∞–¥—Å–∏–ª–∞–π—Ç–µ —Å–≤–æ—ó –≤—ñ–¥–≥—É–∫–∏ –ø–æ–≤—ñ–¥–æ–º–ª–µ–Ω–Ω—è–º.`
      );
      return;
    }

    if (st.state === 'READY' && st.role && st.branch) {
      try {
        const res = await this.feedbackService.processFeedback({
          role: st.role,
          branch: st.branch,
          message: text,
        });

        await ctx.reply(
          `–î—è–∫—É—é! –í—ñ–¥–≥—É–∫ –∑–±–µ—Ä–µ–∂–µ–Ω–æ.\n–¢–æ–Ω–∞–ª—å–Ω—ñ—Å—Ç—å: ${res.analysis?.tone}\n–ö—Ä–∏—Ç–∏—á–Ω—ñ—Å—Ç—å: ${res.analysis?.criticality}\n–ü–æ—Ä–∞–¥–∞: ${res.analysis?.solution}`
        );
      } catch (e) {
        this.logger.error(e);
        await ctx.reply('–°—Ç–∞–ª–∞—Å—è –ø–æ–º–∏–ª–∫–∞ –ø—ñ–¥ —á–∞—Å –æ–±—Ä–æ–±–∫–∏. –°–ø—Ä–æ–±—É–π—Ç–µ —â–µ —Ä–∞–∑ —Ç—Ä–æ—Ö–∏ –ø—ñ–∑–Ω—ñ—à–µ üôè');
      }
    }
  }

  // -------- UI helpers --------

  private roleKeyboard() {
    return Markup.keyboard([this.ROLES]).oneTime().resize();
  }

  private branchKeyboard(branches: string[]) {
    // rows with 3 buttons
    const rows: string[][] = [];
    for (let i = 0; i < branches.length; i += 3) rows.push(branches.slice(i, i + 3));
    return Markup.keyboard(rows).oneTime().resize();
  }

  private async askRole(ctx: any) {
    await ctx.reply('–û–±–µ—Ä—ñ—Ç—å –≤–∞—à—É –ø–æ—Å–∞–¥—É:', this.roleKeyboard());
  }

  private async askBranch(ctx: any) {
    const branches = this.getBranches();
    if (branches.length) {
      await ctx.reply('–û–±–µ—Ä—ñ—Ç—å –≤–∞—à—É —Ñ—ñ–ª—ñ—é:', this.branchKeyboard(branches));
    } else {
      await ctx.reply('–í–≤–µ–¥—ñ—Ç—å –Ω–∞–∑–≤—É –≤–∞—à–æ—ó —Ñ—ñ–ª—ñ—ó —Ç–µ–∫—Å—Ç–æ–º:');
    }
  }

  private getBranches(): string[] {
    const raw = this.config.get<string>('TELEGRAM_BRANCHES') || '';
    return raw.split(',').map(s => s.trim()).filter(Boolean);
  }
}
